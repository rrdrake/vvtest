#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import glob
import unittest
import time

import testutils as util
from testutils import print3

import libvvtest.TestSpecCreator as creator
from libvvtest.RuntimeConfig import RuntimeConfig
from libvvtest.TestList import find_tests_by_execute_directory_match
from libvvtest.TestSpec import TestSpec


class dependency_information( unittest.TestCase ):

    def setUp(self):
        util.setup_test()

    def test_the_dependency_dirs_are_available(self):
        ""
        util.writescript( 'testX.vvt', """
            #!/usr/bin/env python
            #VVT: depends on : testY
            import os
            import vvtest_util as vvt
            assert os.path.isdir( vvt.TESTROOT )
            assert len( vvt.DEPDIRS ) == 1
            yfile = os.path.join( vvt.DEPDIRS[0], 'Y.out' )
            assert os.path.exists( yfile )
            """ )
        util.writescript( 'testY.vvt', """
            #!/usr/bin/env python
            fp = open( 'Y.out', 'w' )
            fp.close()
            """ )
        time.sleep(1)

        vrun = util.vvtestRunner( '-N 4' )
        assert vrun.num_pass == 2

        util.remove_results()
        cmd = '--plat '+util.core_platform_name()+' --batch'
        vrun = util.vvtestRunner( cmd )
        assert vrun.num_pass == 2

    def test_deps_work_with_bash(self):
        ""
        util.writescript( 'testX.vvt', """
            #!/bin/sh
            #VVT: depends on : testY
            source ./vvtest_util.sh
            [ -e $TESTROOT ] || exit 1
            yfile="$DEPDIRS/Y.out"
            cat $yfile || exit 1
            """ )
        util.writescript( 'testY.vvt', """
            #!/bin/sh
            touch Y.out
            """ )
        time.sleep(1)

        vrun = util.vvtestRunner( '-N 4' )
        assert vrun.num_pass == 2

        util.remove_results()
        cmd = '--plat '+util.core_platform_name()+' --batch'
        vrun = util.vvtestRunner( cmd )
        assert vrun.num_pass == 2

    def test_multiple_depdirs(self):
        ""
        util.writescript( 'testX.vvt', """
            #!/usr/bin/env python
            #VVT: depends on : te*Y t*tZ
            import os, glob
            import vvtest_util as vvt

            assert len( vvt.DEPDIRS ) == 2
            assert vvt.DEPDIRS[0].endswith( 'testY' )
            assert vvt.DEPDIRS[1].endswith( 'testZ' )

            pat = os.path.join( vvt.DEPDIRS[0], 'Y.out' )
            assert len( glob.glob( pat ) ) == 1

            pat = os.path.join( vvt.DEPDIRS[1], 'Z.out' )
            assert len( glob.glob( pat ) ) == 1

            assert len( vvt.DEPDIRMAP ) == 2
            assert len( vvt.DEPDIRMAP['te*Y'] ) == 1
            assert len( vvt.DEPDIRMAP['t*tZ'] ) == 1

            assert vvt.DEPDIRMAP['te*Y'][0] == vvt.DEPDIRS[0]
            assert vvt.DEPDIRMAP['t*tZ'][0] == vvt.DEPDIRS[1]
            """ )
        util.writescript( 'testY.vvt', """
            #!/usr/bin/env python
            fp = open( 'Y.out', 'w' )
            fp.close()
            """ )
        util.writescript( 'testZ.vvt', """
            #!/usr/bin/env python
            fp = open( 'Z.out', 'w' )
            fp.close()
            """ )
        time.sleep(1)

        vrun = util.vvtestRunner( '-N 4' )
        assert vrun.num_pass == 3

        util.remove_results()
        cmd = '--plat '+util.core_platform_name()+' --batch'
        vrun = util.vvtestRunner( cmd )
        assert vrun.num_pass == 3

    def test_multiple_dep_matches(self):
        ""
        util.writescript( 'testX.vvt', """
            #!/usr/bin/env python
            #VVT: depends on : testY
            import os, glob
            import vvtest_util as vvt
            assert len( vvt.DEPDIRS ) == 2

            assert len( vvt.DEPDIRMAP ) == 1
            assert len( vvt.DEPDIRMAP['testY'] ) == 2
            assert vvt.DEPDIRMAP['testY'][0].endswith( '/sub1/testY' )
            assert vvt.DEPDIRMAP['testY'][1].endswith( '/sub2/testY' )

            pat = os.path.join( vvt.DEPDIRMAP['testY'][0], 'Y1.out' )
            assert len( glob.glob( pat ) ) == 1

            pat = os.path.join( vvt.DEPDIRMAP['testY'][1], 'Y2.out' )
            assert len( glob.glob( pat ) ) == 1
            """ )
        util.writescript( 'sub1/testY.vvt', """
            #!/usr/bin/env python
            fp = open( 'Y1.out', 'w' )
            fp.close()
            """ )
        util.writescript( 'sub2/testY.vvt', """
            #!/usr/bin/env python
            fp = open( 'Y2.out', 'w' )
            fp.close()
            """ )
        time.sleep(1)

        vrun = util.vvtestRunner( '-N 4' )
        assert vrun.num_pass == 3

        util.remove_results()
        cmd = '--plat '+util.core_platform_name()+' --batch'
        vrun = util.vvtestRunner( cmd )
        assert vrun.num_pass == 3

    def test_depdirs_in_subdirs(self):
        ""
        util.writescript( 'tsrc/testX.vvt', """
            #!/usr/bin/env python
            #VVT: depends on : sub1/testY
            #VVT: depends on : sub2/testZ
            import os, glob
            import vvtest_util as vvt
            assert len( vvt.DEPDIRS ) == 2

            fL = glob.glob( os.path.join( vvt.DEPDIRS[0], '*.out' ) )
            assert len(fL) == 1

            fL = glob.glob( os.path.join( vvt.DEPDIRS[1], '*.out' ) )
            assert len(fL) == 1
            """ )
        util.writescript( 'tsrc/sub1/testY.vvt', """
            #!/usr/bin/env python
            fp = open( 'Y.out', 'w' )
            fp.close()
            """ )
        util.writescript( 'tsrc/sub2/testZ.vvt', """
            #!/usr/bin/env python
            fp = open( 'Z.out', 'w' )
            fp.close()
            """ )
        os.mkdir( 'rdir1' )
        os.mkdir( 'rdir2' )
        time.sleep(1)

        opt = '--plat '+util.core_platform_name() + ' '

        vrun = util.vvtestRunner( opt+'-N 4 ../tsrc', directory='rdir1' )
        assert vrun.num_pass == 3

        tdir = vrun.testdir

        cmd = opt+' --batch ../tsrc'
        vrun = util.vvtestRunner( cmd, directory='rdir2' )
        assert vrun.num_pass == 3
        testrootdir2 = os.path.join( 'rdir2', vrun.testdir )

        vrun = util.vvtestRunner( opt+'-R -N 4', directory='rdir2/'+tdir )
        assert vrun.num_pass == 3
        testrootdir1 = vrun.testdir

        cmd = opt+' -R --batch'
        vrun = util.vvtestRunner( cmd, directory='rdir1/'+tdir )
        assert vrun.num_pass == 3

    def test_depdirs_in_subdirs_of_a_subdir(self):
        ""
        util.writescript( 'tsrc/topdir/testX.vvt', """
            #!/usr/bin/env python
            #VVT: depends on : sub1/testY
            #VVT: depends on : sub2/testZ
            import os, glob
            import vvtest_util as vvt
            assert len( vvt.DEPDIRS ) == 2

            fL = glob.glob( os.path.join( vvt.DEPDIRS[0], '*.out' ) )
            assert len(fL) == 1

            fL = glob.glob( os.path.join( vvt.DEPDIRS[1], '*.out' ) )
            assert len(fL) == 1
            """ )
        util.writescript( 'tsrc/topdir/sub1/testY.vvt', """
            #!/usr/bin/env python
            fp = open( 'Y.out', 'w' )
            fp.close()
            """ )
        util.writescript( 'tsrc/topdir/sub2/testZ.vvt', """
            #!/usr/bin/env python
            fp = open( 'Z.out', 'w' )
            fp.close()
            """ )
        time.sleep(1)

        opt = '--plat '+util.core_platform_name() + ' '

        vrun = util.vvtestRunner( opt+'-N 4 tsrc' )
        assert vrun.num_pass == 3

    def test_analyze_only_restart(self):
        ""
        util.writescript( 'testX.vvt', """
            #!/usr/bin/env python
            #VVT: depends on : testY testZ
            import os, glob
            import vvtest_util as vvt
            assert len( vvt.DEPDIRS ) == 2

            fL = glob.glob( os.path.join( vvt.DEPDIRS[0], '*.out' ) )
            assert len(fL) == 1

            fL = glob.glob( os.path.join( vvt.DEPDIRS[1], '*.out' ) )
            assert len(fL) == 1
            """ )
        util.writescript( 'sub1/testY.vvt', """
            #!/usr/bin/env python
            fp = open( 'Y.out', 'w' )
            fp.close()
            """ )
        util.writescript( 'sub2/testZ.vvt', """
            #!/usr/bin/env python
            fp = open( 'Z.out', 'w' )
            fp.close()
            """ )
        time.sleep(1)

        opt = '--plat '+util.core_platform_name()

        self.analyze_only_restart( opt+' -N 4 ' )
        self.analyze_only_restart( opt+' --batch ' )

    def analyze_only_restart(self, opt):
        ""
        util.remove_results()

        vrun = util.vvtestRunner( opt )
        assert vrun.num_total == 3
        assert vrun.num_pass == 3

        vrun = util.vvtestRunner( opt+'-R -k testX', directory=vrun.testdir )
        assert vrun.num_total == 1
        assert vrun.num_pass == 1

    def test_restart_dependent_and_one_dependency(self):
        ""
        util.writescript( 'testX.vvt', """
            #!/usr/bin/env python
            #VVT: depends on : testY testZ
            import os, glob
            import vvtest_util as vvt
            assert len( vvt.DEPDIRS ) == 2

            vvt.DEPDIRS.sort()

            fL = glob.glob( os.path.join( vvt.DEPDIRS[0], '*.out' ) )
            assert len(fL) == 1
            fp = open( fL[0], 'r' ) ; Yout = fp.read() ; fp.close()
            assert 'testY says hello' in Yout

            fL = glob.glob( os.path.join( vvt.DEPDIRS[1], '*.out' ) )
            assert len(fL) == 1
            fp = open( fL[0], 'r' ) ; Zout = fp.read() ; fp.close()
            assert 'testZ says goodbye' in Zout
            """ )
        util.writescript( 'sub1/testY.vvt', """
            #!/usr/bin/env python
            import os, time
            import script_util as su
            time.sleep(3)
            fp = open( 'Y.out', 'w' )
            fp.write( 'testY does not say the right thing'+os.linesep )
            fp.close()
            su.exit_diff()
            """ )
        util.writescript( 'sub2/testZ.vvt', """
            #!/usr/bin/env python
            import os, time
            time.sleep(3)
            fp = open( 'Z.out', 'w' )
            fp.write( 'testZ says goodbye'+os.linesep )
            fp.close()
            """ )
        time.sleep(1)

        opt = '--plat '+util.core_platform_name()

        self.restart_dependent_and_one_dependency( opt+' -N 4 ' )
        self.restart_dependent_and_one_dependency( opt+' --batch ' )

    def restart_dependent_and_one_dependency(self, opt):
        ""
        util.writescript( 'sub1/testY.vvt', """
            #!/usr/bin/env python
            import os, time
            import script_util as su
            time.sleep(3)
            fp = open( 'Y.out', 'w' )
            fp.write( 'testY does not say the right thing'+os.linesep )
            fp.close()
            su.exit_diff()
            """ )
        util.remove_results()
        time.sleep(1)

        vrun = util.vvtestRunner( opt )
        assert vrun.num_total == 3
        assert vrun.num_pass == 1
        assert vrun.num_diff == 1
        assert vrun.num_fail == 1
        assert vrun.num_notrun == 0

        # "fix" the test
        util.writescript( 'sub1/testY.vvt', """
            #!/usr/bin/env python
            import os, time
            fp = open( 'Y.out', 'w' )
            fp.write( 'testY says hello'+os.linesep )
            fp.close()
            """ )
        time.sleep(1)

        vrun = util.vvtestRunner( opt+'-R -k fail/diff',
                                  directory=vrun.testdir )
        assert vrun.num_total == 2
        assert vrun.num_pass == 2

    def test_depdirs_are_available_when_rerunning_an_analyze(self):
        ""
        util.writescript( 'testA.vvt', """
            #!/usr/bin/env python
            #VVT: parameterize : value = 1 2
            #VVT: analyze : --analyze

            import sys
            import script_util as vvt
            from script_util import print3

            if "--analyze" in sys.argv[1:]:
                print3( "Analysis DEPDIRS", vvt.DEPDIRS )
                assert len(vvt.DEPDIRS) == 2, 'DEPDIRS not length two'
                raise Exception( "always fail" )
            else:
                print3( "value:", vvt.value )
            """ )
        time.sleep(1)

        vrun = util.vvtestRunner()
        assert vrun.num_total == 3 and vrun.num_pass == 2 and vrun.num_fail == 1
        time.sleep(1)

        tdir = vrun.testdir
        lines = util.filegrep( tdir+'/testA/execute.log', 'always fail' )
        assert len( lines ) > 0

        vrun = util.vvtestRunner( '-k fail' )
        assert vrun.num_total == 1 and vrun.num_fail == 1
        lines = util.filegrep( tdir+'/testA/execute.log', 'always fail' )
        assert len( lines ) > 0

    def test_depdirs_are_available_when_rerunning_a_test_with_a_dependency(self):
        ""
        util.writescript( 'testX.vvt', """
            #!/usr/bin/env python
            #VVT: depends on : testY
            import script_util as vvt
            vvt.print3( 'DEPDIRS', vvt.DEPDIRS )
            assert len(vvt.DEPDIRS) == 1, 'DEPDIRS not length one'
            raise Exception( 'always fail' )
            """ )
        util.writescript( 'testY.vvt', """
            #!/usr/bin/env python
            import script_util as vvt
            assert len(vvt.DEPDIRS) == 0
            """ )
        time.sleep(1)

        vrun = util.vvtestRunner()
        assert vrun.num_total == 2 and vrun.num_pass == 1 and vrun.num_fail == 1
        time.sleep(1)

        tdir = vrun.testdir
        lines = util.filegrep( tdir+'/testX/execute.log', 'always fail' )
        assert len( lines ) > 0

        vrun = util.vvtestRunner( '-k fail' )
        assert vrun.num_total == 1 and vrun.num_fail == 1
        lines = util.filegrep( tdir+'/testX/execute.log', 'always fail' )
        assert len( lines ) > 0



############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
